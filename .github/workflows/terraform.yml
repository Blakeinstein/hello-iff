name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: AWS
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        continue-on-error: true
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style ���\`${{ steps.fmt.outcome }}\`
            <details>
              <summary>Show Plan</summary>\n
              > Output
            \n\`\`\`
              ${{ steps.fmt.outputs.stdout }}
            \n\`\`\`
              > Error 
            \n\`\`\`
              ${{ steps.fmt.outputs.stderr }}
            \n\`\`\`\n
            </details>\n
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            <details><summary>Show Plan</summary>\n
              > Output
            \n\`\`\`
            ${{ steps.init.outputs.stdout }}
            \n\`\`\`
              > Error 
            \n\`\`\`
            ${{ steps.init.outputs.stderr }}
            \n\`\`\`\n
            </details>\n
            #### Terraform Validation ���\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>\n
              > Output
            \n\`\`\`
            ${{ steps.validate.outputs.stdout }}
            \n\`\`\`
              > Error 
            \n\`\`\`
            ${{ steps.validate.outputs.stderr }}
            \n\`\`\`\n
            </details>\n
            #### Terraform Plan ���\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>\n
              > Output
            \n\`\`\`
            ${{ steps.plan.outputs.stdout }}
            \n\`\`\`
              > Error 
            \n\`\`\`
            ${{ steps.plan.outputs.stderr }}
            \n\`\`\`\n
            </details>\n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.fmt.outcome == 'failure' || steps.init.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
